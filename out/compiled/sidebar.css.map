{
  "version": 3,
  "file": "sidebar.css",
  "sources": [
    "Dashboard.svelte",
    "Gradeable.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport { onMount } from \"svelte\";\nimport { api_key } from \"../../src/stores\";\n// import { navOptions } from  './Nav.svelte';\t// import application navigation\nimport Course from \"./Course.svelte\"\nimport { store } from '../../src/hooks/auth';\n\nvar courses;\nvar course_titles = [];\nvar checkedSettings = false;\n\nvar navOptions = [];\nlet selected;\nlet intSelected = 0;\t// selected page index\n\nlet y\n\nfunction courseIdToTitle (course_id) {\n\tlet result = \"\";\n\n\tfor (let i in course_id) {\n\t\tlet current_char = course_id.charAt(i);\n\t\tif (i==0) {\n\t\t\tresult += current_char.toUpperCase();\n\t\t} else if (current_char==\"_\") {\n\t\t\tresult += \" \";\n\t\t} else {\n\t\t\tresult += course_id.charAt(i);\n\t\t}\n\t}\n\treturn result;\n}\n\nfunction getSettings() {\n\ttsvscode.postMessage({\n        type:\"getSettings\"\n    })\n}\n\nfunction logOut() {\n\tstore.set(null);\n\tapi_key.set(null);\n\ttsvscode.setState({\n\t\tapi_key:null,\n\t\tusername:null\n\t});\n}\n\n\nonMount(async () => {\n\n\tlet api;\n\tapi_key.subscribe(value => {\n\t\tapi = value;\n\t});\n\n\tvar raw = JSON.stringify({\n\t\t\"Authorization\": api\n\t});\n\n\tvar myHeaders = new Headers();\n\tmyHeaders.append(\"Content-Type\", \"application/json\");\n\n\tvar requestOptions = {\n\t\tmethod: 'POST',\n\t\theaders: myHeaders,\n\t\tredirect: 'follow',\n\t\tbody: raw\n\t  };\n\n\n\tawait fetch(\"http://localhost:3000/courses\", requestOptions)\n\t\t.then(response => response.json())\n\t\t.then(result => {\n\t\t\tcourses = result.data.unarchived_courses;\n\t\t\tfor (let i = 0; i < courses.length; i++) {\n\t\t\t\tlet course = new Object();\n\t\t\t\tcourse[\"display_title\"] = courseIdToTitle(courses[i].title);\n\t\t\t\tcourse[\"id\"] = courses[i].title;\n\t\t\t\tcourse_titles.push(course);\n\t\t\t\tcourse_titles = course_titles;\n\t\t\t}\n\t\t})\n\t\t.catch(error => console.log('error', error));\n\n\tfor (let i=0; i < courses.length; i++) {\n\t\tlet new_page = {\n\t\t\tpage:course_titles[i],\n\t\t\tcomponent: Course,\n\t\t\tprops: {course: course_titles[i]}\n\t\t};\n\t\tnavOptions.push(new_page);\n\t\tnavOptions = navOptions;\n\t}\n\tselected = navOptions[0];\n\n\tif (!checkedSettings) {\n\t\tgetSettings();\n\t}\n\n\t// Handle the message inside the webview\n\twindow.addEventListener('message', event => {\n\t\tconst message = event.data; // The JSON data our extension sent\n\t\tvar state = tsvscode.getState();\n\t\tstate.gradeable = message.gradeable;\n\t\tstate.course = message.course;\n\t\ttsvscode.setState(state);\n\t\tif(message.course) {\n\t\t\tfor (let i in navOptions) {\n\t\t\t\tif (navOptions[i].page.id==message.course) {\n\t\t\t\t\tsetInitialComponent(i)\n\t\t\t\t\tselected = navOptions[i];\n\t\t\t\t\tcheckedSettings = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!checkedSettings) {\n\t\t\t\tselected = navOptions[0];\n\t\t\t}\n\t\t}\n\t\tcheckedSettings = true;\n\t});\n\n\n\n});\n\nfunction setInitialComponent(event) {\n\tselected = navOptions[event];\n\tintSelected = event;\n}\n\n// change the selected component (the event.originalTarget.id is not accessible in Chrome so switched to event.srcElement.id)\nfunction changeComponent(event) {\n\tselected = navOptions[event.srcElement.id];\n\tintSelected = event.srcElement.id;\n}\n</script>\n\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\n\n\n<div class=\"main\">\n\n{#if navOptions.length>0 && checkedSettings}\n\t<!-- Include Bootstrap CSS-->\n\t<!-- <div class=\"container fixed-top \" style=\"margin-top:20px;\"> -->\n\t\t<!--app navigation -->\n\t\t<ul class=\"nav nav-tabs\">\n\t\t\t{#each navOptions as option, i}\n\t\t\t<li class=\"nav-item\">\n\t\t\t\t<button class={intSelected==i ? \"nav-link active p-2 ml-1\" : \"p-2 ml-1 nav-link\"} on:click={changeComponent} id={i} role=\"tab\">{option.page.display_title}</button>\n\t\t\t</li>\n\t\t\t{/each}\n\t\t</ul>\n\t\t<!-- content wrapper -->\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t<div class=\"p-2\">\n\t\t\t\t\t<h1 class=\"text-center\">{selected.page.display_title}</h1>\n\t\t\t\t\t<!-- this is where our main content is placed -->\n\t\t\t\t\t{#key selected.page.id}\n\t\t\t\t\t\t<Course course={selected.page.id}/>\n\t\t\t\t\t{/key}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<button type=\"button\" class=\"btn btn-primary \"  on:click={logOut}>\n\t\t\tLog Out\n\t\t</button>\t\t\n\t<!-- </div> -->\n{/if}\n</div>\n<svelte:window bind:scrollY={y} />\n\n<style>\n\t.main {height: 150vh;  margin-top: 50px;}\n</style>\n",
    "<script>\n    export let gradeable;\n    export let semester;\n    export let course;\n    export let id;\n    export let submissionClosed;\n    export let isTeamAssignment;\n\n    import { onMount } from \"svelte\";\n    import { api_key } from \"../../src/stores\";\n    import { get } from 'svelte/store'\n    import { username_store } from \"../../src/stores\";\n\n    var response = \"\";\n\n    let files;\n    let gradeableResults = [];\n    let submissionFile;\n\n    $: if (!submissionClosed && !isTeamAssignment) {\n        getGradeableResults();\n    }\n\n    $: if (files) {\n\t\t// Note that `files` is of type `FileList`, not an Array:\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/FileList\n\t\tconsole.log(files);\n\n\t\t// for (const file of files) {\n\t\t// \tconsole.log(`${file.name}: ${file.size} bytes`);\n\t\t// }\n\t}\n\n    function submitToSubmitty() {\n        var state = tsvscode.getState();\n        var api = get(api_key);\n        var username = state.username;\n        \n        var formdata = new FormData();\n        formdata.append(\"Authorization\", api);\n        formdata.append(\"User_id\", username);\n        formdata.append(\"previous_files\", \"\");\n        formdata.append(\"Semester\", semester);\n        formdata.append(\"Course\", course);\n        formdata.append(\"Gradeable\", id);\n        formdata.append(\"files\", files[0], files[0].name);\n\n        var requestOptions = {\n        method: 'POST',\n        body: formdata,\n        redirect: 'follow'\n        };\n\n        fetch(\"http://localhost:3000/submit\", requestOptions)\n        .then(response => response.json())\n        .then(result => {\n            response = result.data;\n        })\n        .catch(error => console.log('error', error));\n    }\n\n    function getGradeableResults() {\n        let api;\n        api_key.subscribe(value => {\n            api = value;\n        });\n        var raw = JSON.stringify({\n            \"Authorization\": api,\n            \"course\": course,\n            \"semester\": semester,\n            \"gradeable\": id\n        });\n        var myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n\n        var requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        fetch(\"http://localhost:3000/gradeableResults\", requestOptions)\n        .then(response => response.json())\n        .then(result => {\n            if (result.status==\"success\") {\n                gradeableResults = result[\"data\"].reverse();\n                for (let i in gradeableResults) {\n                    let version = gradeableResults[i].version;\n                    gradeableResults[i].version = Number(version) +1;\n\n                    let result = gradeableResults[i].result*100;\n                    gradeableResults[i].result = result.toFixed(2);\n\n                }\n            } else {\n                return;\n            }\n        })\n        .catch(error => console.log('error', error));\n    }\n\n    function getSubmissionFile(version) {\n        var myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        let api;\n        api_key.subscribe(value => {\n            api = value;\n        });\n\n        var raw = JSON.stringify({\n            \"Authorization\": api,\n            \"semester\": semester,\n            \"course\": course,\n            \"gradeable\": id,\n            \"version\": version,\n            \"file_num\": \"0\"\n        });\n\n        var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n        };\n\n        fetch(\"http://localhost:3000/getSubmissionFiles\", requestOptions)\n        .then(response => response.text())\n        .then(result => {\n            submissionFile = result;\n        })\n        .catch(error => console.log('error', error));\n    }\n\n\n</script>\n\n\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\n\n<div class=\"vstack gap-3 position-relative\">\n    <div class=\"vstack gap-3 bg-light border rounded-3\">\n        <p class=\"fs-2\">Upload files to {gradeable}</p>\n\n        <div class=\"vstack gap-3\">\n            <input \n            bind:files\n            id=\"folder-opener\"\n            multiple\n            type=\"file\">\n        </div>\n        \n        <div>\n            {#if files}\n                <h2>Selected files:</h2>\n                {#each Array.from(files) as file}\n                    <p>{file.name} ({file.size} bytes)</p>\n                {/each}\n            {/if}\n        </div>\n        \n        <div class=\"d-grid gap-2 col-6 text-center\">\n            <button type=\"button\" class=\"btn btn-primary \" on:click={submitToSubmitty}>\n                Submit\n            </button>\n            <div>\n                {response}\n            </div>\n        </div>\n    </div>\n\n\n    {#if submissionClosed}\n        <p class=\"fs-2\">Submission is closed, go to web application for results</p>\n    {:else if isTeamAssignment}\n        <p class=\"fs-2\">This is a team submission, results on web application</p>\n    {:else if gradeableResults.length>0}\n        <div class=\"bg-light border rounded-3\">\n\n            <p class=\"fs-2\">Version results for {gradeable}</p>\n\n            <div class=\"table-wrapper-scroll-y my-custom-scrollbar\">\n                <table class=\"table table-hover\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">Version</th>\n                            <th scope=\"col\">Grade (%)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {#each gradeableResults as result}\n                        <tr>\n                            <th scope=\"row\">{result.version}</th>\n                            <td>{result.result}</td>\n                            <td>\n                                <button class=\"btn btn-primary \" \n                                on:click={ async () => {\n                                    await getSubmissionFile(result.version);\n                                    tsvscode.postMessage({\n                                        type:\"writeAndDiff\",\n                                        value: submissionFile,\n                                        title: id+result.version\n                                    })\n                                }}>See Diff</button>\n                            </td>\n                        </tr>\n                    {/each}\n                    </tbody>\n                </table>\n            </div>    \n        </div>\n    {:else}\n        <p class=\"fs-2\">No submission for {gradeable} so far</p>\n    {/if} \n\n\n</div>\n\n<style>\n    .my-custom-scrollbar {\n        position: relative;\n        height: 200px;\n        overflow: auto;\n    }\n    .table-wrapper-scroll-y {\n        display: block;\n    }\n\n</style>"
  ],
  "names": [],
  "mappings": "AA+KC,KAAK,eAAC,CAAC,MAAM,CAAE,KAAK,CAAG,UAAU,CAAE,IAAI,AAAC,CAAC;AC4CtC,oBAAoB,cAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,IAAI,AAClB,CAAC,AACD,uBAAuB,cAAC,CAAC,AACrB,OAAO,CAAE,KAAK,AAClB,CAAC"
}