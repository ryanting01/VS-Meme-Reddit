{
  "version": 3,
  "file": "sidebar.css",
  "sources": [
    "Gradeable.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">export let gradeable;\nexport let semester;\nexport let course;\nexport let id;\nexport let submissionClosed;\nexport let isTeamAssignment;\nimport \"svelte\";\nimport { api_key } from \"../../src/stores\";\nimport { get } from 'svelte/store';\nimport { username_store } from \"../../src/stores\";\nimport \"vscode\";\nvar response = \"\";\n// let files: ArrayLike<unknown> | Iterable<unknown>;\nlet files;\nlet gradeableResults = [];\n// $: if (!results.submissionClosed && !results.isTeamAssignment) {\n$: if (!submissionClosed && !isTeamAssignment) {\n    getGradeableResults();\n}\n$: if (files) {\n    // Note that `files` is of type `FileList`, not an Array:\n    // https://developer.mozilla.org/en-US/docs/Web/API/FileList\n    console.log(files);\n    // for (const file of files) {\n    // \tconsole.log(`${file.name}: ${file.size} bytes`);\n    // }\n}\nfunction showDiff() {\n    // vscode.commands.executeCommand('code --diff hi.txt hi1.txt');\n    console.log(\"hi\");\n}\nfunction submitToSubmitty() {\n    // let api : string|Number;\n    // api_key.subscribe(value => {\n    //     api = value;\n    // });\n    var api = get(api_key);\n    // let user_id;\n    // username_store.subscribe(value => {\n    //     user_id = value;\n    // });\n    const user_id = get(username_store);\n    var formdata = new FormData();\n    // formdata.append(\"Authorization\", api);\n    // formdata.append(\"User_id\", user_id);\n    formdata.append(\"Authorization\", api);\n    formdata.append(\"User_id\", user_id);\n    formdata.append(\"previous_files\", \"\");\n    formdata.append(\"Semester\", semester);\n    formdata.append(\"Course\", course);\n    formdata.append(\"Gradeable\", id);\n    formdata.append(\"files\", files[0], files[0].name);\n    var requestOptions = {\n        method: 'POST',\n        body: formdata,\n        redirect: 'follow'\n    };\n    fetch(\"http://localhost:3000/submit\", requestOptions)\n        .then(response => response.json())\n        .then(result => {\n        response = result.data;\n    })\n        .catch(error => console.log('error', error));\n}\nfunction getGradeableResults() {\n    let api;\n    api_key.subscribe(value => {\n        api = value;\n    });\n    var raw = JSON.stringify({\n        \"Authorization\": api,\n        \"course\": course,\n        \"semester\": semester,\n        \"gradeable\": id\n    });\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n    fetch(\"http://localhost:3000/gradeableResults\", requestOptions)\n        .then(response => response.json())\n        .then(result => {\n        if (result.status == \"success\") {\n            gradeableResults = result[\"data\"].reverse();\n        }\n        else {\n            return;\n        }\n    })\n        .catch(error => console.log('error', error));\n}\n</script>\n\n\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\n\n<button type=\"button\" class=\"btn btn-primary \" on:click={showDiff}>\n    Show Diff\n</button>\n\n\n<div class=\"vstack gap-3 position-relative\">\n    <div class=\"vstack gap-3 bg-light border rounded-3\">\n        <p class=\"fs-2\">Upload files to {gradeable}</p>\n\n        <div class=\"vstack gap-3\">\n            <input \n            bind:files\n            id=\"folder-opener\"\n            multiple\n            type=\"file\">\n        </div>\n        \n        <div>\n            {#if files}\n                <h2>Selected files:</h2>\n                {#each Array.from(files) as file}\n                    <p>{file.name} ({file.size} bytes)</p>\n                {/each}\n            {/if}\n        </div>\n        \n        <div class=\"d-grid gap-2 col-6 text-center\">\n            <button type=\"button\" class=\"btn btn-primary \" on:click={submitToSubmitty}>\n                Submit\n            </button>\n            <div>\n                {response}\n            </div>\n        </div>\n    </div>\n\n    {isTeamAssignment}\n\n\n    {#if submissionClosed}\n        <p class=\"fs-2\">Submission is closed, go to web application for results</p>\n    {:else if isTeamAssignment}\n        <p class=\"fs-2\">This is a team submission, results on web application</p>\n    {:else if gradeableResults.length>0}\n        <div class=\"bg-light border rounded-3\">\n\n            <p class=\"fs-2\">Version results for {gradeable}</p>\n\n            <div class=\"table-wrapper-scroll-y my-custom-scrollbar\">\n                <table class=\"table table-hover\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">Version</th>\n                            <th scope=\"col\">Grade (%)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {#each gradeableResults as result}\n                        <tr>\n                            <th scope=\"row\">{result.version}</th>\n                            <td>{result.result}</td>\n                        </tr>\n                    {/each}\n                    </tbody>\n                </table>\n            </div>    \n        </div>\n    {:else}\n        <p class=\"fs-2\">No submission for {gradeable} so far</p>\n    {/if} \n\n\n</div>\n\n<style>\n    .my-custom-scrollbar {\n        position: relative;\n        height: 200px;\n        overflow: auto;\n    }\n    .table-wrapper-scroll-y {\n        display: block;\n    }\n\n</style>"
  ],
  "names": [],
  "mappings": "AA+KI,oBAAoB,cAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,IAAI,AAClB,CAAC,AACD,uBAAuB,cAAC,CAAC,AACrB,OAAO,CAAE,KAAK,AAClB,CAAC"
}